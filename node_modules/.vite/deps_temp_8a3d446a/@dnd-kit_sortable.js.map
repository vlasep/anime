{
  "version": 3,
  "sources": ["../../@dnd-kit/sortable/src/utilities/arrayMove.ts", "../../@dnd-kit/sortable/src/utilities/arraySwap.ts", "../../@dnd-kit/sortable/src/utilities/getSortedRects.ts", "../../@dnd-kit/sortable/src/utilities/isValidIndex.ts", "../../@dnd-kit/sortable/src/strategies/horizontalListSorting.ts", "../../@dnd-kit/sortable/src/strategies/rectSorting.ts", "../../@dnd-kit/sortable/src/strategies/rectSwapping.ts", "../../@dnd-kit/sortable/src/strategies/verticalListSorting.ts", "../../@dnd-kit/sortable/src/components/SortableContext.tsx", "../../@dnd-kit/sortable/src/hooks/defaults.ts", "../../@dnd-kit/sortable/src/hooks/utilities/useDerivedTransform.ts", "../../@dnd-kit/sortable/src/hooks/useSortable.ts", "../../@dnd-kit/sortable/src/sensors/keyboard/sortableKeyboardCoordinates.ts"],
  "sourcesContent": ["/**\n * Move an array item to a different position. Returns a new array with the item moved to the new position.\n */\nexport function arrayMove<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n  newArray.splice(\n    to < 0 ? newArray.length + to : to,\n    0,\n    newArray.splice(from, 1)[0]\n  );\n\n  return newArray;\n}\n", "/**\n * Swap an array item to a different position. Returns a new array with the item swapped to the new position.\n */\nexport function arraySwap<T>(array: T[], from: number, to: number): T[] {\n  const newArray = array.slice();\n\n  newArray[from] = array[to];\n  newArray[to] = array[from];\n\n  return newArray;\n}\n", "import type {\n  ClientRect,\n  UniqueIdentifier,\n  UseDndContextReturnValue,\n} from '@dnd-kit/core';\n\nexport function getSortedRects(\n  items: UniqueIdentifier[],\n  rects: UseDndContextReturnValue['droppableRects']\n) {\n  return items.reduce<ClientRect[]>((accumulator, id, index) => {\n    const rect = rects.get(id);\n\n    if (rect) {\n      accumulator[index] = rect;\n    }\n\n    return accumulator;\n  }, Array(items.length));\n}\n", "export function isValidIndex(index: number | null): index is number {\n  return index !== null && index >= 0;\n}\n", "import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const horizontalListSortingStrategy: SortingStrategy = ({\n  rects,\n  activeNodeRect: fallbackActiveRect,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index === activeIndex) {\n    const newIndexRect = rects[overIndex];\n\n    if (!newIndexRect) {\n      return null;\n    }\n\n    return {\n      x:\n        activeIndex < overIndex\n          ? newIndexRect.left +\n            newIndexRect.width -\n            (activeNodeRect.left + activeNodeRect.width)\n          : newIndexRect.left - activeNodeRect.left,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: -activeNodeRect.width - itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: activeNodeRect.width + itemGap,\n      y: 0,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(rects: ClientRect[], index: number, activeIndex: number) {\n  const currentRect: ClientRect | undefined = rects[index];\n  const previousRect: ClientRect | undefined = rects[index - 1];\n  const nextRect: ClientRect | undefined = rects[index + 1];\n\n  if (!currentRect || (!previousRect && !nextRect)) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.left - (previousRect.left + previousRect.width)\n      : nextRect.left - (currentRect.left + currentRect.width);\n  }\n\n  return nextRect\n    ? nextRect.left - (currentRect.left + currentRect.width)\n    : currentRect.left - (previousRect.left + previousRect.width);\n}\n", "import {arrayMove} from '../utilities';\nimport type {SortingStrategy} from '../types';\n\nexport const rectSortingStrategy: SortingStrategy = ({\n  rects,\n  activeIndex,\n  overIndex,\n  index,\n}) => {\n  const newRects = arrayMove(rects, overIndex, activeIndex);\n\n  const oldRect = rects[index];\n  const newRect = newRects[index];\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n", "import type {SortingStrategy} from '../types';\n\nexport const rectSwappingStrategy: SortingStrategy = ({\n  activeIndex,\n  index,\n  rects,\n  overIndex,\n}) => {\n  let oldRect;\n  let newRect;\n\n  if (index === activeIndex) {\n    oldRect = rects[index];\n    newRect = rects[overIndex];\n  }\n\n  if (index === overIndex) {\n    oldRect = rects[index];\n    newRect = rects[activeIndex];\n  }\n\n  if (!newRect || !oldRect) {\n    return null;\n  }\n\n  return {\n    x: newRect.left - oldRect.left,\n    y: newRect.top - oldRect.top,\n    scaleX: newRect.width / oldRect.width,\n    scaleY: newRect.height / oldRect.height,\n  };\n};\n", "import type {ClientRect} from '@dnd-kit/core';\nimport type {SortingStrategy} from '../types';\n\n// To-do: We should be calculating scale transformation\nconst defaultScale = {\n  scaleX: 1,\n  scaleY: 1,\n};\n\nexport const verticalListSortingStrategy: SortingStrategy = ({\n  activeIndex,\n  activeNodeRect: fallbackActiveRect,\n  index,\n  rects,\n  overIndex,\n}) => {\n  const activeNodeRect = rects[activeIndex] ?? fallbackActiveRect;\n\n  if (!activeNodeRect) {\n    return null;\n  }\n\n  if (index === activeIndex) {\n    const overIndexRect = rects[overIndex];\n\n    if (!overIndexRect) {\n      return null;\n    }\n\n    return {\n      x: 0,\n      y:\n        activeIndex < overIndex\n          ? overIndexRect.top +\n            overIndexRect.height -\n            (activeNodeRect.top + activeNodeRect.height)\n          : overIndexRect.top - activeNodeRect.top,\n      ...defaultScale,\n    };\n  }\n\n  const itemGap = getItemGap(rects, index, activeIndex);\n\n  if (index > activeIndex && index <= overIndex) {\n    return {\n      x: 0,\n      y: -activeNodeRect.height - itemGap,\n      ...defaultScale,\n    };\n  }\n\n  if (index < activeIndex && index >= overIndex) {\n    return {\n      x: 0,\n      y: activeNodeRect.height + itemGap,\n      ...defaultScale,\n    };\n  }\n\n  return {\n    x: 0,\n    y: 0,\n    ...defaultScale,\n  };\n};\n\nfunction getItemGap(\n  clientRects: ClientRect[],\n  index: number,\n  activeIndex: number\n) {\n  const currentRect: ClientRect | undefined = clientRects[index];\n  const previousRect: ClientRect | undefined = clientRects[index - 1];\n  const nextRect: ClientRect | undefined = clientRects[index + 1];\n\n  if (!currentRect) {\n    return 0;\n  }\n\n  if (activeIndex < index) {\n    return previousRect\n      ? currentRect.top - (previousRect.top + previousRect.height)\n      : nextRect\n      ? nextRect.top - (currentRect.top + currentRect.height)\n      : 0;\n  }\n\n  return nextRect\n    ? nextRect.top - (currentRect.top + currentRect.height)\n    : previousRect\n    ? currentRect.top - (previousRect.top + previousRect.height)\n    : 0;\n}\n", "import React, {useEffect, useMemo, useRef} from 'react';\nimport {useDndContext, ClientRect, UniqueIdentifier} from '@dnd-kit/core';\nimport {useIsomorphicLayoutEffect, useUniqueId} from '@dnd-kit/utilities';\n\nimport type {SortingStrategy} from '../types';\nimport {getSortedRects} from '../utilities';\nimport {rectSortingStrategy} from '../strategies';\n\nexport interface Props {\n  children: React.ReactNode;\n  items: (UniqueIdentifier | {id: UniqueIdentifier})[];\n  strategy?: SortingStrategy;\n  id?: string;\n}\n\nconst ID_PREFIX = 'Sortable';\n\ninterface ContextDescriptor {\n  activeIndex: number;\n  containerId: string;\n  disableTransforms: boolean;\n  items: UniqueIdentifier[];\n  overIndex: number;\n  useDragOverlay: boolean;\n  sortedRects: ClientRect[];\n  strategy: SortingStrategy;\n}\n\nexport const Context = React.createContext<ContextDescriptor>({\n  activeIndex: -1,\n  containerId: ID_PREFIX,\n  disableTransforms: false,\n  items: [],\n  overIndex: -1,\n  useDragOverlay: false,\n  sortedRects: [],\n  strategy: rectSortingStrategy,\n});\n\nexport function SortableContext({\n  children,\n  id,\n  items: userDefinedItems,\n  strategy = rectSortingStrategy,\n}: Props) {\n  const {\n    active,\n    dragOverlay,\n    droppableRects,\n    over,\n    measureDroppableContainers,\n    measuringScheduled,\n  } = useDndContext();\n  const containerId = useUniqueId(ID_PREFIX, id);\n  const useDragOverlay = Boolean(dragOverlay.rect !== null);\n  const items = useMemo(\n    () =>\n      userDefinedItems.map((item) =>\n        typeof item === 'string' ? item : item.id\n      ),\n    [userDefinedItems]\n  );\n  const isDragging = active != null;\n  const activeIndex = active ? items.indexOf(active.id) : -1;\n  const overIndex = over ? items.indexOf(over.id) : -1;\n  const previousItemsRef = useRef(items);\n  const itemsHaveChanged = !isEqual(items, previousItemsRef.current);\n  const disableTransforms =\n    (overIndex !== -1 && activeIndex === -1) || itemsHaveChanged;\n\n  useIsomorphicLayoutEffect(() => {\n    if (itemsHaveChanged && isDragging && !measuringScheduled) {\n      measureDroppableContainers(items);\n    }\n  }, [\n    itemsHaveChanged,\n    items,\n    isDragging,\n    measureDroppableContainers,\n    measuringScheduled,\n  ]);\n\n  useEffect(() => {\n    previousItemsRef.current = items;\n  }, [items]);\n\n  const contextValue = useMemo(\n    (): ContextDescriptor => ({\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      useDragOverlay,\n      sortedRects: getSortedRects(items, droppableRects),\n      strategy,\n    }),\n    [\n      activeIndex,\n      containerId,\n      disableTransforms,\n      items,\n      overIndex,\n      droppableRects,\n      useDragOverlay,\n      strategy,\n    ]\n  );\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>;\n}\n\nfunction isEqual(arr1: string[], arr2: string[]) {\n  return arr1.join() === arr2.join();\n}\n", "import {CSS} from '@dnd-kit/utilities';\n\nimport {arrayMove} from '../utilities';\n\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\n\nexport const defaultNewIndexGetter: NewIndexGetter = ({\n  id,\n  items,\n  activeIndex,\n  overIndex,\n}) => arrayMove(items, activeIndex, overIndex).indexOf(id);\n\nexport const defaultAnimateLayoutChanges: AnimateLayoutChanges = ({\n  containerId,\n  isSorting,\n  wasDragging,\n  index,\n  items,\n  newIndex,\n  previousItems,\n  previousContainerId,\n  transition,\n}) => {\n  if (!transition || !wasDragging) {\n    return false;\n  }\n\n  if (previousItems !== items && index === newIndex) {\n    return false;\n  }\n\n  if (isSorting) {\n    return true;\n  }\n\n  return newIndex !== index && containerId === previousContainerId;\n};\n\nexport const defaultTransition: SortableTransition = {\n  duration: 200,\n  easing: 'ease',\n};\n\nexport const transitionProperty = 'transform';\n\nexport const disabledTransition = CSS.Transition.toString({\n  property: transitionProperty,\n  duration: 0,\n  easing: 'linear',\n});\n\nexport const defaultAttributes = {\n  roleDescription: 'sortable',\n};\n", "import {useEffect, useRef, useState} from 'react';\nimport {getClientRect, ClientRect} from '@dnd-kit/core';\nimport {Transform, useIsomorphicLayoutEffect} from '@dnd-kit/utilities';\n\ninterface Arguments {\n  rect: React.MutableRefObject<ClientRect | null>;\n  disabled: boolean;\n  index: number;\n  node: React.MutableRefObject<HTMLElement | null>;\n}\n\n/*\n * When the index of an item changes while sorting,\n * we need to temporarily disable the transforms\n */\nexport function useDerivedTransform({disabled, index, node, rect}: Arguments) {\n  const [derivedTransform, setDerivedtransform] = useState<Transform | null>(\n    null\n  );\n  const previousIndex = useRef(index);\n\n  useIsomorphicLayoutEffect(() => {\n    if (!disabled && index !== previousIndex.current && node.current) {\n      const initial = rect.current;\n\n      if (initial) {\n        const current = getClientRect(node.current, {\n          ignoreTransform: true,\n        });\n\n        const delta = {\n          x: initial.left - current.left,\n          y: initial.top - current.top,\n          scaleX: initial.width / current.width,\n          scaleY: initial.height / current.height,\n        };\n\n        if (delta.x || delta.y) {\n          setDerivedtransform(delta);\n        }\n      }\n    }\n\n    if (index !== previousIndex.current) {\n      previousIndex.current = index;\n    }\n  }, [disabled, index, node, rect]);\n\n  useEffect(() => {\n    if (derivedTransform) {\n      requestAnimationFrame(() => {\n        setDerivedtransform(null);\n      });\n    }\n  }, [derivedTransform]);\n\n  return derivedTransform;\n}\n", "import {useContext, useEffect, useMemo, useRef} from 'react';\nimport {\n  useDraggable,\n  useDroppable,\n  UseDraggableArguments,\n  UseDroppableArguments,\n} from '@dnd-kit/core';\nimport {CSS, isKeyboardEvent, useCombinedRefs} from '@dnd-kit/utilities';\n\nimport {Context} from '../components';\nimport type {SortingStrategy} from '../types';\nimport {isValidIndex} from '../utilities';\nimport {\n  defaultAnimateLayoutChanges,\n  defaultAttributes,\n  defaultNewIndexGetter,\n  defaultTransition,\n  disabledTransition,\n  transitionProperty,\n} from './defaults';\nimport type {\n  AnimateLayoutChanges,\n  NewIndexGetter,\n  SortableTransition,\n} from './types';\nimport {useDerivedTransform} from './utilities';\n\nexport interface Arguments\n  extends UseDraggableArguments,\n    Pick<UseDroppableArguments, 'resizeObserverConfig'> {\n  animateLayoutChanges?: AnimateLayoutChanges;\n  getNewIndex?: NewIndexGetter;\n  strategy?: SortingStrategy;\n  transition?: SortableTransition | null;\n}\n\nexport function useSortable({\n  animateLayoutChanges = defaultAnimateLayoutChanges,\n  attributes: userDefinedAttributes,\n  disabled,\n  data: customData,\n  getNewIndex = defaultNewIndexGetter,\n  id,\n  strategy: localStrategy,\n  resizeObserverConfig,\n  transition = defaultTransition,\n}: Arguments) {\n  const {\n    items,\n    containerId,\n    activeIndex,\n    disableTransforms,\n    sortedRects,\n    overIndex,\n    useDragOverlay,\n    strategy: globalStrategy,\n  } = useContext(Context);\n  const index = items.indexOf(id);\n  const data = useMemo(\n    () => ({sortable: {containerId, index, items}, ...customData}),\n    [containerId, customData, index, items]\n  );\n  const itemsAfterCurrentSortable = useMemo(\n    () => items.slice(items.indexOf(id)),\n    [items, id]\n  );\n  const {rect, node, isOver, setNodeRef: setDroppableNodeRef} = useDroppable({\n    id,\n    data,\n    resizeObserverConfig: {\n      updateMeasurementsFor: itemsAfterCurrentSortable,\n      ...resizeObserverConfig,\n    },\n  });\n  const {\n    active,\n    activatorEvent,\n    activeNodeRect,\n    attributes,\n    setNodeRef: setDraggableNodeRef,\n    listeners,\n    isDragging,\n    over,\n    transform,\n  } = useDraggable({\n    id,\n    data,\n    attributes: {\n      ...defaultAttributes,\n      ...userDefinedAttributes,\n    },\n    disabled,\n  });\n  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);\n  const isSorting = Boolean(active);\n  const displaceItem =\n    isSorting &&\n    !disableTransforms &&\n    isValidIndex(activeIndex) &&\n    isValidIndex(overIndex);\n  const shouldDisplaceDragSource = !useDragOverlay && isDragging;\n  const dragSourceDisplacement =\n    shouldDisplaceDragSource && displaceItem ? transform : null;\n  const strategy = localStrategy ?? globalStrategy;\n  const finalTransform = displaceItem\n    ? dragSourceDisplacement ??\n      strategy({\n        rects: sortedRects,\n        activeNodeRect,\n        activeIndex,\n        overIndex,\n        index,\n      })\n    : null;\n  const newIndex =\n    isValidIndex(activeIndex) && isValidIndex(overIndex)\n      ? getNewIndex({id, items, activeIndex, overIndex})\n      : index;\n  const activeId = active?.id;\n  const previous = useRef({\n    activeId,\n    items,\n    newIndex,\n    containerId,\n  });\n  const itemsHaveChanged = items !== previous.current.items;\n  const shouldAnimateLayoutChanges = animateLayoutChanges({\n    active,\n    containerId,\n    isDragging,\n    isSorting,\n    id,\n    index,\n    items,\n    newIndex: previous.current.newIndex,\n    previousItems: previous.current.items,\n    previousContainerId: previous.current.containerId,\n    transition,\n    wasDragging: previous.current.activeId != null,\n  });\n  const derivedTransform = useDerivedTransform({\n    disabled: !shouldAnimateLayoutChanges,\n    index,\n    node,\n    rect,\n  });\n\n  useEffect(() => {\n    if (isSorting && previous.current.newIndex !== newIndex) {\n      previous.current.newIndex = newIndex;\n    }\n\n    if (containerId !== previous.current.containerId) {\n      previous.current.containerId = containerId;\n    }\n\n    if (items !== previous.current.items) {\n      previous.current.items = items;\n    }\n\n    if (activeId !== previous.current.activeId) {\n      previous.current.activeId = activeId;\n    }\n  }, [activeId, isSorting, newIndex, containerId, items]);\n\n  return {\n    active,\n    activeIndex,\n    attributes,\n    rect,\n    index,\n    newIndex,\n    items,\n    isOver,\n    isSorting,\n    isDragging,\n    listeners,\n    node,\n    overIndex,\n    over,\n    setNodeRef,\n    setDroppableNodeRef,\n    setDraggableNodeRef,\n    transform: derivedTransform ?? finalTransform,\n    transition: getTransition(),\n  };\n\n  function getTransition() {\n    if (\n      // Temporarily disable transitions for a single frame to set up derived transforms\n      derivedTransform ||\n      // Or to prevent items jumping to back to their \"new\" position when items change\n      (itemsHaveChanged && previous.current.newIndex === index)\n    ) {\n      return disabledTransition;\n    }\n\n    if (\n      (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent)) ||\n      !transition\n    ) {\n      return undefined;\n    }\n\n    if (isSorting || shouldAnimateLayoutChanges) {\n      return CSS.Transition.toString({\n        ...transition,\n        property: transitionProperty,\n      });\n    }\n\n    return undefined;\n  }\n}\n", "import {\n  closestCorners,\n  getScrollableAncestors,\n  getFirstCollision,\n  KeyboardCode,\n  DroppableContainer,\n  KeyboardCoordinateGetter,\n} from '@dnd-kit/core';\n\nconst directions: string[] = [\n  KeyboardCode.Down,\n  KeyboardCode.Right,\n  KeyboardCode.Up,\n  KeyboardCode.Left,\n];\n\nexport const sortableKeyboardCoordinates: KeyboardCoordinateGetter = (\n  event,\n  {context: {active, droppableContainers, collisionRect, scrollableAncestors}}\n) => {\n  if (directions.includes(event.code)) {\n    event.preventDefault();\n\n    if (!active || !collisionRect) {\n      return;\n    }\n\n    const filteredContainers: DroppableContainer[] = [];\n\n    droppableContainers.getEnabled().forEach((entry) => {\n      if (!entry || entry?.disabled) {\n        return;\n      }\n\n      const rect = entry?.rect.current;\n\n      if (!rect) {\n        return;\n      }\n\n      switch (event.code) {\n        case KeyboardCode.Down:\n          if (collisionRect.top + collisionRect.height <= rect.top) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Up:\n          if (collisionRect.top >= rect.top + rect.height) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Left:\n          if (collisionRect.left >= rect.left + rect.width) {\n            filteredContainers.push(entry);\n          }\n          break;\n        case KeyboardCode.Right:\n          if (collisionRect.left + collisionRect.width <= rect.left) {\n            filteredContainers.push(entry);\n          }\n          break;\n      }\n    });\n\n    const collisions = closestCorners({\n      active,\n      collisionRect: collisionRect,\n      droppableContainers: filteredContainers,\n      pointerCoordinates: null,\n    });\n    const closestId = getFirstCollision(collisions, 'id');\n\n    if (closestId != null) {\n      const newDroppable = droppableContainers.get(closestId);\n      const newNode = newDroppable?.node.current;\n      const newRect = newDroppable?.rect.current;\n\n      if (newNode && newRect) {\n        const newScrollAncestors = getScrollableAncestors(newNode);\n        const hasDifferentScrollAncestors = newScrollAncestors.some(\n          (element, index) => scrollableAncestors[index] !== element\n        );\n        const offset = hasDifferentScrollAncestors\n          ? {\n              x: 0,\n              y: 0,\n            }\n          : {\n              x: collisionRect.width - newRect.width,\n              y: collisionRect.height - newRect.height,\n            };\n        const newCoordinates = {\n          x: newRect.left - offset.x,\n          y: newRect.top - offset.y,\n        };\n\n        return newCoordinates;\n      }\n    }\n  }\n\n  return undefined;\n};\n"],
  "mappings": "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",
  "names": ["arrayMove", "array", "from", "to", "newArray", "slice", "splice", "length", "arraySwap", "getSortedRects", "items", "rects", "reduce", "accumulator", "id", "index", "rect", "get", "Array", "isValidIndex", "defaultScale", "scaleX", "scaleY", "horizontalListSortingStrategy", "activeNodeRect", "fallbackActiveRect", "activeIndex", "overIndex", "itemGap", "getItemGap", "newIndexRect", "x", "left", "width", "y", "currentRect", "previousRect", "nextRect", "rectSortingStrategy", "newRects", "oldRect", "newRect", "top", "height", "rectSwappingStrategy", "verticalListSortingStrategy", "overIndexRect", "clientRects", "ID_PREFIX", "Context", "React", "createContext", "containerId", "disableTransforms", "useDragOverlay", "sortedRects", "strategy", "SortableContext", "children", "userDefinedItems", "active", "dragOverlay", "droppableRects", "over", "measureDroppableContainers", "measuringScheduled", "useDndContext", "useUniqueId", "Boolean", "useMemo", "map", "item", "isDragging", "indexOf", "previousItemsRef", "useRef", "itemsHaveChanged", "isEqual", "current", "useIsomorphicLayoutEffect", "useEffect", "contextValue", "Provider", "value", "arr1", "arr2", "join", "defaultNewIndexGetter", "defaultAnimateLayoutChanges", "isSorting", "wasDragging", "newIndex", "previousItems", "previousContainerId", "transition", "defaultTransition", "duration", "easing", "transitionProperty", "disabledTransition", "CSS", "Transition", "toString", "property", "defaultAttributes", "roleDescription", "useDerivedTransform", "disabled", "node", "derivedTransform", "setDerivedtransform", "useState", "previousIndex", "initial", "getClientRect", "ignoreTransform", "delta", "requestAnimationFrame", "useSortable", "animateLayoutChanges", "attributes", "userDefinedAttributes", "data", "customData", "getNewIndex", "localStrategy", "resizeObserverConfig", "globalStrategy", "useContext", "sortable", "itemsAfterCurrentSortable", "isOver", "setNodeRef", "setDroppableNodeRef", "useDroppable", "updateMeasurementsFor", "activatorEvent", "setDraggableNodeRef", "listeners", "transform", "useDraggable", "useCombinedRefs", "displaceItem", "shouldDisplaceDragSource", "dragSourceDisplacement", "finalTransform", "activeId", "previous", "shouldAnimateLayoutChanges", "getTransition", "isKeyboardEvent", "undefined", "directions", "KeyboardCode", "Down", "Right", "Up", "Left", "sortableKeyboardCoordinates", "event", "context", "droppableContainers", "collisionRect", "scrollableAncestors", "includes", "code", "preventDefault", "filteredContainers", "getEnabled", "forEach", "entry", "push", "collisions", "closestCorners", "pointerCoordinates", "closestId", "getFirstCollision", "newDroppable", "newNode", "newScrollAncestors", "getScrollableAncestors", "hasDifferentScrollAncestors", "some", "element", "offset", "newCoordinates"]
}
